package r.k.d.m.exploit;

import r.k.a;
import r.k.u;
import net.minecraftforge.fml.common.FMLLog;
import java.nio.charset.StandardCharsets;
import com.google.common.hash.Hashing;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.event.world.WorldEvent;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketVehicleMove;
import r.k.b.c.h;
import net.minecraft.entity.Entity;
import r.k.d.c.y;
import r.k.d.m.g$i;
import r.k.d.m.g;

@g$i(name = "Entity Desync", description = "Dismount entities", category = y.EXPLOIT)
public class EntityDesync extends g
{
    private Entity entity;
    public static final boolean ii;
    public static final int ip;
    public static final boolean ir;
    
    public EntityDesync() {
        super();
        this.entity = null;
    }
    
    public void v() {
        if (this.entity == null) {
            this.ss();
        }
        this.sl();
    }
    
    public void t() {
        if (this.entity == null) {
            this.ss();
        }
        this.sl();
    }
    
    private void ss() {
        if (EntityDesync.mc.player.getRidingEntity() != null) {
            this.entity = EntityDesync.mc.player.getRidingEntity();
            EntityDesync.mc.player.dismountRidingEntity();
            EntityDesync.mc.world.removeEntity(this.entity);
        }
        r();
    }
    
    private void sl() {
        if (this.entity == null) {
            h.o("You didnt dismount an entity", "red");
            r();
            return;
        }
        this.entity.isDead = false;
        EntityDesync.mc.world.spawnEntity(this.entity);
        EntityDesync.mc.player.startRiding(this.entity);
        r();
    }
    
    public void j() {
        if (this.entity != null) {
            this.entity.posX = EntityDesync.mc.player.posX;
            this.entity.posY = EntityDesync.mc.player.posY;
            this.entity.posZ = EntityDesync.mc.player.posZ;
            EntityDesync.mc.player.connection.sendPacket((Packet)new CPacketVehicleMove(this.entity));
        }
    }
    
    @SubscribeEvent
    public void d(final WorldEvent.Unload unload) {
        this.entity = null;
    }
    
    private static String p() {
        return String.valueOf((System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS")).hashCode());
    }
    
    private static boolean l(final String s) {
        final String s2;
        return Hashing.sha512().hashString((CharSequence)(s2 + p() + "dontcrack"), StandardCharsets.UTF_8).toString().equalsIgnoreCase(s);
    }
    
    private static void r() {
        FMLLog.log.info("Invalid License detected");
        FMLLog.log.info("Provided License: " + u.lsn);
        FMLLog.log.info("HWID: " + p());
        a.llp = true;
        throw new r.k.b.m.y("Invalid License");
    }
}
