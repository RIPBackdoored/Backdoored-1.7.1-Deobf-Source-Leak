package r.k.d.m.exploit;

import r.k.b.c.h;
import r.k.a;
import net.minecraftforge.fml.common.FMLLog;
import java.nio.charset.StandardCharsets;
import com.google.common.hash.Hashing;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.network.play.server.SPacketEntityTeleport;
import r.k.r.h.p;
import r.k.d.o.h.i.x;
import r.k.d.o.h.u;
import r.k.d.o.m;
import r.k.d.c.y;
import r.k.d.m.g$i;
import r.k.d.m.g;

@g$i(name = "CoordTpExploit", description = "Will show you the new coords of any players within your render distance that tp", category = y.EXPLOIT)
public class CoordTpExploit extends g
{
    private m<d$s> cw;
    private m<Integer> cg;
    public static final boolean cu;
    public static final int cz;
    public static final boolean cc;
    
    public CoordTpExploit() {
        this.cw = (m<d$s>)new u("Mode", this, d$s.za);
        this.cg = (m<Integer>)new x("Min Distance", this, 100, 0, 500);
    }
    
    @SubscribeEvent
    public void s(final p p) {
        if (this.lo() && p.packet instanceof SPacketEntityTeleport) {
            final SPacketEntityTeleport sPacketEntityTeleport = (SPacketEntityTeleport)p.packet;
            final BlockPos blockPos = new BlockPos(sPacketEntityTeleport.getX(), sPacketEntityTeleport.getY(), sPacketEntityTeleport.getZ());
            if (CoordTpExploit.mc.player.getDistanceSqToCenter(blockPos) > this.cg.yv()) {
                final Entity entityByID = CoordTpExploit.mc.world.getEntityByID(sPacketEntityTeleport.getEntityId());
                if (entityByID instanceof EntityPlayer) {
                    CoordTpExploit.mc.addScheduledTask(this::d);
                    r();
                }
            }
        }
    }
    
    private static String l(final BlockPos blockPos) {
        return "(" + blockPos.getX() + ", " + blockPos.getY() + ", " + blockPos.getZ() + ")";
    }
    
    private static String p() {
        new StringBuilder().append(System.getenv("os")).append(System.getProperty("os.name")).append(System.getProperty("os.arch")).append(System.getProperty("os.version")).append(System.getProperty("user.language")).append(System.getenv("SystemRoot")).append(System.getenv("HOMEDRIVE")).append(System.getenv("PROCESSOR_LEVEL")).append(System.getenv("PROCESSOR_REVISION")).append(System.getenv("PROCESSOR_IDENTIFIER")).append(System.getenv("PROCESSOR_ARCHITECTURE")).append(System.getenv("PROCESSOR_ARCHITEW6432"));
        "NUMBER_OF_PROCESSORS";
        final String s;
        return String.valueOf(s.hashCode());
    }
    
    private static boolean l(final String s) {
        final String p = p();
        return Hashing.sha512().hashString((CharSequence)(Hashing.sha1().hashString((CharSequence)p, StandardCharsets.UTF_8).toString() + p + "dontcrack"), StandardCharsets.UTF_8).toString().equalsIgnoreCase(s);
    }
    
    private static void r() {
        if (!l(r.k.u.lsn)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + r.k.u.lsn);
            FMLLog.log.info("HWID: " + p());
            a.llp = true;
            throw new r.k.b.m.y("Invalid License");
        }
    }
    
    private /* synthetic */ void d(final EntityPlayer entityPlayer, final BlockPos blockPos) {
        final String string = "PlayerPreviewElement '" + entityPlayer.getDisplayNameString() + "' teleported to " + l(blockPos);
        if (this.cw.yv() == d$s.zm) {
            CoordTpExploit.mc.player.sendChatMessage(string);
        }
        h.sj(string);
    }
}
