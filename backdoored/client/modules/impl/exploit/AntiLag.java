package r.k.d.m.exploit;

import net.minecraft.util.text.ITextComponent;
import java.awt.event.ActionEvent;
import java.util.Iterator;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntitySign;
import net.minecraft.block.Block;
import net.minecraftforge.fml.common.eventhandler.Event;
import net.minecraft.block.BlockPistonExtension;
import net.minecraft.block.BlockPistonMoving;
import r.k.r.i;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.network.play.server.SPacketSoundEffect;
import java.util.HashSet;
import r.k.d.o.h.p;
import net.minecraft.util.SoundEvent;
import java.util.Set;
import r.k.d.o.m;
import javax.swing.Timer;
import r.k.d.c.y;
import r.k.d.m.g$i;
import r.k.d.m.g;

@g$i(name = "Anti Lag", description = "Prevents lag exploits", category = y.EXPLOIT)
public class AntiLag extends g
{
    private final Timer il;
    private final m<Boolean> iy;
    private final m<Boolean> ix;
    private final m<Boolean> ik;
    private final Set<SoundEvent> iq;
    public static final boolean iv;
    public static final int ij;
    public static final boolean ie;
    
    public AntiLag() {
        super();
        this.iy = (m<Boolean>)new p("Anti Sound", this, true);
        this.ix = (m<Boolean>)new p("Anti Piston", this, true);
        this.ik = (m<Boolean>)new p("Anti Sign", this, false);
        this.iq = new HashSet<SoundEvent>();
        this.il = new Timer(500, this::l);
    }
    
    public void v() {
        try {
            this.il.start();
        }
        catch (Exception ex) {}
    }
    
    public void t() {
    }
    
    @SubscribeEvent
    public void s(final r.k.r.h.p p) {
        if (this.lo() && this.iy.yv() && p.packet instanceof SPacketSoundEffect) {
            final SPacketSoundEffect sPacketSoundEffect = (SPacketSoundEffect)p.packet;
            if (this.iq.contains(sPacketSoundEffect.getSound())) {
                p.setCanceled(true);
            }
            this.iq.add(sPacketSoundEffect.getSound());
        }
    }
    
    @SubscribeEvent
    public void d(final i i) {
        if (this.lo() && this.ix.yv()) {
            final Block block = i.iBlockState.getBlock();
            if (block instanceof BlockPistonMoving || block instanceof BlockPistonExtension) {
                i.setCanceled(true);
                i.setResult(Event.Result.DENY);
            }
        }
    }
    
    public void m() {
        if (this.lo() && this.ik.yv()) {
            final Iterator<TileEntity> iterator = AntiLag.mc.world.loadedTileEntityList.iterator();
            if (iterator.hasNext()) {
                final TileEntitySign tileEntitySign = (TileEntitySign)iterator.next();
                final String[] array = { "Buy", "Backdoored", "Client", "Now" };
                int n = 0;
                if (n < tileEntitySign.signText.length) {
                    tileEntitySign.signText[n] = (ITextComponent)new TextComponentString(array[n]);
                    ++n;
                }
            }
        }
    }
    
    private /* synthetic */ void l(final ActionEvent actionEvent) {
        this.iq.clear();
    }
}
