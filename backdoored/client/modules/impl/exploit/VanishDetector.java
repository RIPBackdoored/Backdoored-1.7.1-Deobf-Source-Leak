package r.k.d.m.exploit;

import r.k.s.o;
import java.util.Set;
import r.k.b.c.h;
import java.util.Map;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import java.util.Iterator;
import java.util.HashSet;
import net.minecraft.network.play.server.SPacketPlayerListItem;
import r.k.r.h.p;
import java.util.UUID;
import java.util.HashMap;
import r.k.d.c.y;
import r.k.d.m.g$i;
import r.k.d.m.g;

@g$i(name = "Vanish Detector", description = "Detect players in vanish", category = y.EXPLOIT)
@g$i(name = "Vanish Detector", description = "Detect players in vanish", category = y.EXPLOIT)
public class VanishDetector extends g
{
    private final HashMap<UUID, String> szz;
    public static final boolean szc;
    public static final int sza;
    public static final boolean szm;
    private final HashMap<UUID, String> szz;
    public static final boolean szc;
    public static final int sza;
    public static final boolean szm;
    
    public VanishDetector() {
        super();
        this.szz = new HashMap<UUID, String>();
    }
    
    @SubscribeEvent
    public void q(final p p) {
        if (p.packet instanceof SPacketPlayerListItem && this.lo()) {
            final SPacketPlayerListItem sPacketPlayerListItem = (SPacketPlayerListItem)p.packet;
            if (sPacketPlayerListItem.getAction() == SPacketPlayerListItem.Action.UPDATE_LATENCY) {
                final HashSet<UUID> set = new HashSet<UUID>();
                final Iterator iterator = sPacketPlayerListItem.getEntries().iterator();
                if (iterator.hasNext()) {
                    final SPacketPlayerListItem.AddPlayerData addPlayerData = iterator.next();
                    if (VanishDetector.mc.getConnection().getPlayerInfo(addPlayerData.getProfile().getId()) == null) {
                        set.add(addPlayerData.getProfile().getId());
                    }
                }
                new Thread(this::d, "Vanish thing idk").start();
            }
        }
    }
    
    public void j() {
        synchronized (this.szz) {
            final Iterator<Map.Entry<UUID, String>> iterator = this.szz.entrySet().iterator();
            if (iterator.hasNext()) {
                final Map.Entry<UUID, String> entry = iterator.next();
                h.o("PlayerPreviewElement " + entry.getValue() + " has gone into vanish (" + entry.getKey() + ")", "gold");
            }
            this.szz.clear();
        }
        // monitorexit(this.szz)
    }
    
    private /* synthetic */ void d(final Set p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: goto            5
        //     4: return         
        //     5: nop            
        //     6: nop            
        //    StackMapTable: 00 03 FF 00 04 00 07 07 00 34 07 00 82 00 00 00 00 01 00 00 00 FF 00 01 00 07 07 00 34 07 00 82 07 00 5F 00 01 01 01 00 00
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public VanishDetector() {
        super();
        this.szz = new HashMap<UUID, String>();
    }
    
    @SubscribeEvent
    public void q(final p p) {
        if (p.packet instanceof SPacketPlayerListItem && this.lo()) {
            final SPacketPlayerListItem sPacketPlayerListItem = (SPacketPlayerListItem)p.packet;
            if (sPacketPlayerListItem.getAction() == SPacketPlayerListItem.Action.UPDATE_LATENCY) {
                final HashSet<UUID> set = new HashSet<UUID>();
                final Iterator iterator = sPacketPlayerListItem.getEntries().iterator();
                if (iterator.hasNext()) {
                    final SPacketPlayerListItem.AddPlayerData addPlayerData = iterator.next();
                    if (VanishDetector.mc.getConnection().getPlayerInfo(addPlayerData.getProfile().getId()) == null) {
                        set.add(addPlayerData.getProfile().getId());
                    }
                }
                new Thread(this::d, "Vanish thing idk").start();
            }
        }
    }
    
    public void j() {
        synchronized (this.szz) {
            final Iterator<Map.Entry<UUID, String>> iterator = this.szz.entrySet().iterator();
            if (iterator.hasNext()) {
                final Map.Entry<UUID, String> entry = iterator.next();
                h.o("PlayerPreviewElement " + entry.getValue() + " has gone into vanish (" + entry.getKey() + ")", "gold");
            }
            this.szz.clear();
        }
        // monitorexit(this.szz)
    }
    
    private /* synthetic */ void d(final Set set) {
        final Iterator<UUID> iterator;
        if (iterator.hasNext()) {
            final UUID uuid = iterator.next();
            this.szz.put(uuid, o.n(uuid.toString()));
        }
    }
}
