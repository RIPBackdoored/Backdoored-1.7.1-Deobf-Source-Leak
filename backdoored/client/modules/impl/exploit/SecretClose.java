package r.k.d.m.exploit;

import r.k.a;
import net.minecraftforge.fml.common.FMLLog;
import r.k.u;
import java.nio.charset.StandardCharsets;
import com.google.common.hash.Hashing;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.network.play.client.CPacketCloseWindow;
import java.util.Iterator;
import r.k.b.c.h;
import java.awt.Color;
import net.minecraft.tileentity.TileEntityHopper;
import r.k.d.o.h.p;
import r.k.d.o.m;
import r.k.d.c.y;
import r.k.d.m.g$i;
import r.k.d.m.g;

@g$i(name = "Secret Close", description = "allows you to use illegals like 32ks", category = y.EXPLOIT)
public class SecretClose extends g
{
    private m<Boolean> qf;
    private m<Boolean> qb;
    public static final boolean qw;
    public static final int qg;
    public static final boolean qu;
    
    public SecretClose() {
        super();
        this.qf = (m<Boolean>)new p("Range Render", this, true);
        this.qb = (m<Boolean>)new p("AutoOff", this, false);
    }
    
    public void m() {
        if (!this.lo() || !this.qf.yv()) {
            return;
        }
        final Iterator<TileEntityHopper> iterator = SecretClose.mc.world.loadedTileEntityList.iterator();
        if (iterator.hasNext()) {
            final TileEntityHopper next = iterator.next();
            if (next instanceof TileEntityHopper && next.getPos().getDistance((int)SecretClose.mc.player.posX, (int)SecretClose.mc.player.posY, (int)SecretClose.mc.player.posZ) <= 8.0) {
                try {
                    System.out.println(next.getPos().add(0, 0, 0));
                    r.k.b.u.p.d(next.getPos().add(0, 0, 0), 8.0, Color.ORANGE);
                }
                catch (Exception ex) {
                    ex.printStackTrace();
                    this.qb.d(false);
                    h.sj("Disabled hopper range render due to error: " + ex.toString());
                }
            }
            if (next instanceof TileEntityHopper && next.getPos().getDistance((int)SecretClose.mc.player.posX, (int)SecretClose.mc.player.posY, (int)SecretClose.mc.player.posZ) > 8.0 && this.qb.yv()) {
                this.s(false);
            }
        }
    }
    
    @SubscribeEvent
    public void d(final r.k.r.h.y y) {
        if (this.lo() && y.packet instanceof CPacketCloseWindow) {
            r();
        }
    }
    
    private static String p() {
        return String.valueOf((System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS")).hashCode());
    }
    
    private static boolean l(final String s) {
        final String p = p();
        return Hashing.sha512().hashString((CharSequence)(Hashing.sha1().hashString((CharSequence)p, StandardCharsets.UTF_8).toString() + p + "dontcrack"), StandardCharsets.UTF_8).toString().equalsIgnoreCase(s);
    }
    
    private static void r() {
        if (!l(u.lsn)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + u.lsn);
            FMLLog.log.info("HWID: " + p());
            a.llp = true;
            throw new r.k.b.m.y("Invalid License");
        }
    }
}
